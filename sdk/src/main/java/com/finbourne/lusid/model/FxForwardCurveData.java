/*
 * LUSID API
 * # Introduction  This page documents the [LUSID APIs](https://www.lusid.com/api/swagger), which allows authorised clients to query and update their data within the LUSID platform.  SDKs to interact with the LUSID APIs are available in the following languages and frameworks:  * [C#](https://github.com/finbourne/lusid-sdk-csharp) * [Java](https://github.com/finbourne/lusid-sdk-java) * [JavaScript](https://github.com/finbourne/lusid-sdk-js) * [Python](https://github.com/finbourne/lusid-sdk-python) * [Angular](https://github.com/finbourne/lusid-sdk-angular)  The LUSID platform is made up of a number of sub-applications. You can find the API / swagger documentation by following the links in the table below.   | Application | Description | API / Swagger Documentation | | ----- | ----- | ---- | | LUSID | Open, API-first, developer-friendly investment data platform. | [Swagger](https://www.lusid.com/api/swagger/index.html) | | Web app | User-facing front end for LUSID. | [Swagger](https://www.lusid.com/app/swagger/index.html) | | Scheduler | Automated job scheduler. | [Swagger](https://www.lusid.com/scheduler2/swagger/index.html) | | Insights |Monitoring and troubleshooting service. | [Swagger](https://www.lusid.com/insights/swagger/index.html) | | Identity | Identity management for LUSID (in conjuction with Access) | [Swagger](https://www.lusid.com/identity/swagger/index.html) | | Access | Access control for LUSID (in conjunction with Identity) | [Swagger](https://www.lusid.com/access/swagger/index.html) | | Drive | Secure file repository and manager for collaboration. | [Swagger](https://www.lusid.com/drive/swagger/index.html) | | Luminesce | Data virtualisation service (query data from multiple providers, including LUSID) | [Swagger](https://www.lusid.com/honeycomb/swagger/index.html) | | Notification | Notification service. | [Swagger](https://www.lusid.com/notifications/swagger/index.html) | | Configuration | File store for secrets and other sensitive information. | [Swagger](https://www.lusid.com/configuration/swagger/index.html) | 
 *
 * The version of the OpenAPI document: 0.11.3514
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.finbourne.lusid.model;

import java.util.Objects;
import java.util.Arrays;
import com.finbourne.lusid.model.ComplexMarketData;
import com.finbourne.lusid.model.FxForwardCurveDataAllOf;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Contains data (i.e. dates and rates + metadata) for building fx forward curves
 */
@ApiModel(description = "Contains data (i.e. dates and rates + metadata) for building fx forward curves")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FxForwardCurveData extends ComplexMarketData {
  public static final String SERIALIZED_NAME_BASE_DATE = "baseDate";
  @SerializedName(SERIALIZED_NAME_BASE_DATE)
  private OffsetDateTime baseDate;

  public static final String SERIALIZED_NAME_DOM_CCY = "domCcy";
  @SerializedName(SERIALIZED_NAME_DOM_CCY)
  private String domCcy;

  public static final String SERIALIZED_NAME_FGN_CCY = "fgnCcy";
  @SerializedName(SERIALIZED_NAME_FGN_CCY)
  private String fgnCcy;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private List<OffsetDateTime> dates = new ArrayList<>();

  public static final String SERIALIZED_NAME_RATES = "rates";
  @SerializedName(SERIALIZED_NAME_RATES)
  private List<Double> rates = new ArrayList<>();

  public FxForwardCurveData() {
    //this.marketDataType = this.getClass().getSimpleName();
  }

  public FxForwardCurveData baseDate(OffsetDateTime baseDate) {
    this.baseDate = baseDate; 
    return this;
  }

   /**
   * EffectiveAt date of the quoted rates
   * @return baseDate
  **/
  @ApiModelProperty(required = true, value = "EffectiveAt date of the quoted rates")
  public OffsetDateTime getBaseDate() {
    return baseDate;
  }

  public void setBaseDate(OffsetDateTime baseDate) {
    this.baseDate = baseDate;
  }


  public FxForwardCurveData domCcy(String domCcy) {
    this.domCcy = domCcy; 
    return this;
  }

   /**
   * Domestic currency of the fx forward
   * @return domCcy
  **/
  @ApiModelProperty(required = true, value = "Domestic currency of the fx forward")
  public String getDomCcy() {
    return domCcy;
  }

  public void setDomCcy(String domCcy) {
    this.domCcy = domCcy;
  }


  public FxForwardCurveData fgnCcy(String fgnCcy) {
    this.fgnCcy = fgnCcy; 
    return this;
  }

   /**
   * Foreign currency of the fx forward
   * @return fgnCcy
  **/
  @ApiModelProperty(required = true, value = "Foreign currency of the fx forward")
  public String getFgnCcy() {
    return fgnCcy;
  }

  public void setFgnCcy(String fgnCcy) {
    this.fgnCcy = fgnCcy;
  }


  public FxForwardCurveData dates(List<OffsetDateTime> dates) {
    this.dates = dates; 
    return this;
  }

  public FxForwardCurveData addDatesItem(OffsetDateTime datesItem) {
   
    this.dates.add(datesItem);
    return this;
  }

   /**
   * Dates for which the forward rates apply
   * @return dates
  **/
  @ApiModelProperty(required = true, value = "Dates for which the forward rates apply")
  public List<OffsetDateTime> getDates() {
    return dates;
  }

  public void setDates(List<OffsetDateTime> dates) {
    this.dates = dates;
  }


  public FxForwardCurveData rates(List<Double> rates) {
    this.rates = rates; 
    return this;
  }

  public FxForwardCurveData addRatesItem(Double ratesItem) {
   
    this.rates.add(ratesItem);
    return this;
  }

   /**
   * Rates provided for the fx forward (price in FgnCcy per unit of DomCcy)
   * @return rates
  **/
  @ApiModelProperty(required = true, value = "Rates provided for the fx forward (price in FgnCcy per unit of DomCcy)")
  public List<Double> getRates() {
    return rates;
  }

  public void setRates(List<Double> rates) {
    this.rates = rates;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    return super.equals(o);
  }

  @Override
  public int hashCode() {
    return super.hashCode();  
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FxForwardCurveData {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    baseDate: ").append(toIndentedString(baseDate)).append("\n");
    sb.append("    domCcy: ").append(toIndentedString(domCcy)).append("\n");
    sb.append("    fgnCcy: ").append(toIndentedString(fgnCcy)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("    rates: ").append(toIndentedString(rates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
